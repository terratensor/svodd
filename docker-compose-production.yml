version: "3.9"
services:
  cron:
    image: crazymax/swarm-cronjob:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      LOG_LEVEL: info
    deploy:
      placement:
        constraints: [ node.role == manager ]

  frontend:
    image: ${REGISTRY}/fct-search-frontend:${IMAGE_TAG}
    networks:
      - traefik-public
      - default
    environment:
      APP_ENV: prod
      MAINTENANCE_MODE: false
      APP_DEBUG: 0
      POSTGRES_HOST: ${APP_POSTGRES_HOST}
      POSTGRES_USER: ${APP_POSTGRES_USER}
      POSTGRES_PASSWORD_FILE: /run/secrets/app_db_password
      POSTGRES_DB: ${APP_POSTGRES_DB}
      MAILER_HOST: ${APP_MAILER_HOST}
      MAILER_PORT: ${APP_MAILER_PORT}
      MAILER_USERNAME: ${APP_MAILER_USERNAME}
      MAILER_PASSWORD_FILE: /run/secrets/app_mailer_password
      MAILER_ENCRYPTION: tls
      MAILER_FROM_EMAIL: ${APP_MAILER_FROM_EMAIL}
      COOKIE_DOMAIN: fct-search.audetv.ru
      FRONTEND_URL: https://fct-search.audetv.ru
      SENTRY_DSN_FILE: /run/secrets/sentry_dsn
      PARSED_FILES_DIR: /data
      PAGE_SIZE: 50
      CURRENT_QUESTION: 6006
      REDIS_HOST: ${APP_REDIS_HOST}
      REDIS_PORT: ${APP_REDIS_PORT}
      REDIS_PASSWORD_FILE: /run/secrets/redis_password
    secrets:
      - app_db_password
      - app_mailer_password
      - sentry_dsn
      - redis_password
    volumes:
      - parsed-files:/app/data
    deploy:
      placement:
        constraints: [ node.labels.frontend == frontend ]
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.http.routers.frontend.rule=Host(`fct-search.audetv.ru`) || Host(`www.fct-search.audetv.ru`)
        - traefik.http.services.frontend.loadBalancer.server.port=80
        - traefik.http.middlewares.frontend-redirect.redirectRegex.regex=^(https?://)www.fct-search.audetv.ru/(.*)$$
        - traefik.http.middlewares.frontend-redirect.redirectRegex.replacement=$${1}fct-search.audetv.ru/$${2}
        - traefik.http.middlewares.frontend-redirect.redirectRegex.permanent=true
        - traefik.http.routers.frontend.middlewares=frontend-redirect,secure-headers
        - traefik.http.routers.frontend.entryPoints=https
        - traefik.http.routers.frontend.tls=true
        - traefik.http.routers.frontend.tls.certResolver=letsEncrypt
      mode: replicated
      replicas: 2
      update_config:
        parallelism: 1
        delay: 30s

  app-migration:
    image: ${REGISTRY}/fct-search-cli-php:${IMAGE_TAG}
    environment:
      APP_ENV: prod
      APP_DEBUG: 0
      POSTGRES_HOST: ${APP_POSTGRES_HOST}
      POSTGRES_USER: ${APP_POSTGRES_USER}
      POSTGRES_PASSWORD_FILE: /run/secrets/app_db_password
      POSTGRES_DB: ${APP_POSTGRES_DB}
      MAILER_HOST: ${APP_MAILER_HOST}
      MAILER_PORT: ${APP_MAILER_PORT}
      MAILER_USERNAME: ${APP_MAILER_USERNAME}
      MAILER_PASSWORD_FILE: /run/secrets/app_mailer_password
      MAILER_ENCRYPTION: tls
      MAILER_FROM_EMAIL: ${APP_MAILER_FROM_EMAIL}
      FRONTEND_URL: https://fct-search.audetv.ru
      SENTRY_DSN_FILE: /run/secrets/sentry_dsn
      PARSED_FILES_DIR: /data
      PAGE_SIZE: 50
      CURRENT_QUESTION: 6006
      REDIS_HOST: ${APP_REDIS_HOST}
      REDIS_PORT: ${APP_REDIS_PORT}
      REDIS_PASSWORD_FILE: /run/secrets/redis_password
    secrets:
      - app_db_password
      - app_mailer_password
      - sentry_dsn
      - redis_password
    command: sh -c 'wait-for-it app-postgres:5432 -t 60 && php yii migrate --interactive=0 && php yii migrate-rbac --interactive=0'
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s

  current-topic-parser:
    image: ${REGISTRY}/fct-parser:main-44
    volumes:
      - parsed-files:/app/parsed-files
    #    command: './fct-parser -j -h -a'
    deploy:
      labels:
        - swarm.cronjob.enable=true
        - swarm.cronjob.schedule=*/1 * * * *
        - swarm.cronjob.skip-running=true
      placement:
        constraints: [ node.labels.parser == parser ]
      replicas: 0
      restart_policy:
        condition: none

  previous-topic-parser:
    image: ${REGISTRY}/fct-parser:main-44
    volumes:
      - parsed-files:/app/parsed-files
    command: './fct-parser -e -j -h'
    deploy:
      labels:
        - swarm.cronjob.enable=true
        - swarm.cronjob.schedule=*/8 * * * *
        - swarm.cronjob.skip-running=true
      placement:
        constraints: [ node.labels.parser == parser ]
      replicas: 0
      restart_policy:
        condition: none

  questions-parser-1:
    image: ${REGISTRY}/fct-parser:main-44
    volumes:
      - parsed-files:/app/parsed-files
    command: './fct-parser -p=1 -j -h'
    deploy:
      labels:
        - swarm.cronjob.enable=true
        - swarm.cronjob.schedule=5,15,25,35,45,55 * * * *
        - swarm.cronjob.skip-running=true
      placement:
        constraints: [ node.labels.parser == parser ]
      replicas: 0
      restart_policy:
        condition: none

  questions-parser-2:
    image: ${REGISTRY}/fct-parser:main-44
    volumes:
      - parsed-files:/app/parsed-files
    command: './fct-parser -p=2 -j -h'
    deploy:
      labels:
        - swarm.cronjob.enable=true
        - swarm.cronjob.schedule=10,30,50 * * * *
        - swarm.cronjob.skip-running=true
      placement:
        constraints: [ node.labels.parser == parser ]
      replicas: 0
      restart_policy:
        condition: none

  questions-parser-3:
    image: ${REGISTRY}/fct-parser:main-44
    volumes:
      - parsed-files:/app/parsed-files
    command: './fct-parser -p=5 -j -h'
    deploy:
      labels:
        - swarm.cronjob.enable=true
        - swarm.cronjob.schedule=20,40 * * * *
        - swarm.cronjob.skip-running=true
      placement:
        constraints: [ node.labels.parser == parser ]
      replicas: 0
      restart_policy:
        condition: none

  questions-parser-4:
    image: ${REGISTRY}/fct-parser:main-44
    volumes:
      - parsed-files:/app/parsed-files
    command: './fct-parser -p=10 -j -h'
    deploy:
      labels:
        - swarm.cronjob.enable=true
        - swarm.cronjob.schedule=0 * * * *
        - swarm.cronjob.skip-running=true
      placement:
        constraints: [ node.labels.parser == parser ]
      replicas: 0
      restart_policy:
        condition: none

  app-updater:
    image: ${REGISTRY}/fct-search-cli-php:${IMAGE_TAG}
    environment:
      APP_ENV: prod
      APP_DEBUG: 0
      POSTGRES_HOST: ${APP_POSTGRES_HOST}
      POSTGRES_USER: ${APP_POSTGRES_USER}
      POSTGRES_PASSWORD_FILE: /run/secrets/app_db_password
      POSTGRES_DB: ${APP_POSTGRES_DB}
      MAILER_HOST: ${APP_MAILER_HOST}
      MAILER_PORT: ${APP_MAILER_PORT}
      MAILER_USERNAME: ${APP_MAILER_USERNAME}
      MAILER_PASSWORD_FILE: /run/secrets/app_mailer_password
      MAILER_ENCRYPTION: tls
      MAILER_FROM_EMAIL: ${APP_MAILER_FROM_EMAIL}
      FRONTEND_URL: https://fct-search.audetv.ru
      SENTRY_DSN_FILE: /run/secrets/sentry_dsn
      PARSED_FILES_DIR: /data
      PAGE_SIZE: 50
      CURRENT_QUESTION: 32649
      REDIS_HOST: ${APP_REDIS_HOST}
      REDIS_PORT: ${APP_REDIS_PORT}
      REDIS_PASSWORD_FILE: /run/secrets/redis_password
    secrets:
      - app_db_password
      - app_mailer_password
      - sentry_dsn
      - redis_password
    volumes:
      - parsed-files:/app/data
    command: sh -c 'wait-for-it app-postgres:5432 -t 60 && php yii index/updating-index'
    deploy:
      labels:
        - swarm.cronjob.enable=true
        - swarm.cronjob.schedule=*/1 * * * *
        - swarm.cronjob.skip-running=true
      placement:
        constraints: [ node.labels.parser == parser ]
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s

  app-postgres:
    image: postgres:15.1-alpine
    environment:
      POSTGRES_USER: ${APP_POSTGRES_USER}
      POSTGRES_PASSWORD_FILE: /run/secrets/app_db_password
      POSTGRES_DB: ${APP_POSTGRES_DB}
    secrets:
      - app_db_password
    volumes:
      - app-postgres:/var/lib/postgresql/data
    deploy:
      placement:
        constraints: [ node.role == manager ]
      endpoint_mode: dnsrr

  manticore:
    image: manticoresearch/manticore
    ulimits:
      nproc: 65535
      nofile:
        soft: 65535
        hard: 65535
      memlock:
        soft: -1
        hard: -1
    environment:
      searchd_query_log: /var/log/manticore/query.log
    volumes:
      - manticore:/var/lib/manticore
      - manticore:/var/log/manticore
    deploy:
      placement:
        constraints: [ node.role == manager ]
      endpoint_mode: dnsrr

  redis:
    image: redis:7.0.10
    secrets:
      - redis_password
    command: sh -c 'redis-server --save 60 1 --requirepass  "$$(cat /run/secrets/redis_password)"'
    volumes:
      - session-cache:/data
    deploy:
      placement:
        constraints: [ node.labels.frontend == frontend ]

  app-postgres-backup:
    image: ${REGISTRY}/fct-search-postgres-backup:${IMAGE_TAG}
    environment:
      BACKUP_NAME: fct-search_app-postgres
      POSTGRES_HOST: ${APP_POSTGRES_HOST}
      POSTGRES_USER: ${APP_POSTGRES_USER}
      POSTGRES_PASSWORD_FILE: /run/secrets/app_db_password
      POSTGRES_DB: ${APP_POSTGRES_DB}
      AWS_ACCESS_KEY_ID: ${BACKUP_AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY_FILE: /run/secrets/backup_aws_secret_access_key
      AWS_DEFAULT_REGION: ${BACKUP_AWS_DEFAULT_REGION}
      S3_ENDPOINT: ${BACKUP_S3_ENDPOINT}
      S3_BUCKET: ${BACKUP_S3_BUCKET}
    secrets:
      - app_db_password
      - backup_aws_secret_access_key
    command: sh -c 'wait-for-it app-postgres:5432 -t 60 && backup'
    deploy:
      labels:
        - swarm.cronjob.enable=true
        - swarm.cronjob.schedule=6 */12 * * *
        - swarm.cronjob.skip-running=true
      placement:
        constraints: [ node.labels.parser == parser ]
      replicas: 0
      restart_policy:
        condition: none

secrets:
  app_db_password:
    file: ${APP_DB_PASSWORD_FILE}
  app_mailer_password:
    file: ${APP_MAILER_PASSWORD_FILE}
  sentry_dsn:
    file: ${APP_SENTRY_DSN_FILE}
  redis_password:
    file: ${APP_REDIS_PASSWORD_FILE}
  backup_aws_secret_access_key:
    file: ${BACKUP_AWS_ACCESS_KEY_FILE}

volumes:
  app-postgres:
  manticore:
  parsed-files:
  session-cache:
    driver: local

networks:
  traefik-public:
    external: true
